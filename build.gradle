apply plugin: 'java'
// enables 'install' task into repository
apply plugin: 'maven'
group = 'com.researchspace'
sourceCompatibility = 1.8
version = '0.1.2-nativeuploadSNAPSHOT'
def springVersion='4.3.0.RELEASE'
def jacksonVersion='2.6.7'

repositories {
    mavenCentral()
    // local repo to hold SWORD libraries
    maven {       
        url 'libs/maven-repo'
   }    
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

// these are unused SWORD transitive dependencies which are either obsolete or now included in the JDK
configurations {
     all*.exclude group: 'javax.jms'
     all*.exclude group: 'com.sun.jdmk'
     all*.exclude group: 'com.sun.jmx'
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.springframework:spring-web:'+springVersion
    compile 'org.springframework:spring-core:'+springVersion
    compile 'com.fasterxml.jackson.core:jackson-annotations:'+jacksonVersion
    compile 'com.fasterxml.jackson.core:jackson-core:'+jacksonVersion
    compile 'com.fasterxml.jackson.core:jackson-databind:'+jacksonVersion
      
    compile 'org.projectlombok:lombok:1.16.10'
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    //for SWORD-API. Sword is included locally in this project
    compile 'org.swordapp:sword2-client:0.9.2'
    compile 'org.apache.abdera:abdera-client:1.1.1'
 
    testCompile   'junit:junit:4.12'
    testCompile   'org.springframework:spring-test:'+springVersion
    testCompile   'org.slf4j:slf4j-simple:1.7.21'
}

test{
 testLogging.showStandardStreams = true
 //delegate command line properties through to Test JVM
 systemProperties = System.getProperties()
}


task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    systemProperties = System.getProperties()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

//Lists dependencies
task listJars << {
    configurations.compile.each { File file -> println file.name }
}